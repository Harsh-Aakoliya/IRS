# -*- coding: utf-8 -*-
"""21BCE111_IRS_Practical_2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12A10NH0cmtEnGdgXNbR1YTZOVOAYO8QG

### Importing Necessary Librariries
"""

import numpy as np

"""### A corpus of 10 Documents"""

s="People love to daydream. I am no exception to this universal affection of people. I often daydream that I won the first prize in the lottery and became a millionaire. Now, if I win the lottery for five lakh rupees, I will spend two lakh rupees on my personal comforts and luxuries. I plan to demolish my fatherâ€™s straw house and replace it with a two-story paved structure. \
I will buy a laptop and a bike. I will spend the remaining three lakh rupees to ease the suffering of the people. I will keep the larger part of this money in a bank and help the poor people with the interest on this money.\
    People live in society. Hence we cannot identify with those who live near us and work with us"

"""### Data Preprocessing"""

a=s.split('.')

a

b=[]
for i in a:
    i=" ".join(i.split())
    i=i.replace(',',' ').replace("'",' ').lower()
    b.append(i)

b

dict_key={}
for i in b:
    c=i.split()
    for j in c:
        if(j not in dict_key):
            dict_key[j]=1

dict_key

"""### Process to find the Inverse Term Matrix"""

dict={}
for i in dict_key.keys():
    x=[]
    for j in b:
        print(j)
        if i in j:
            x.append(1)
        else:
            x.append(0)
    print(x)
    dict[i]=(x)

"""### Term Matrix"""

dict

"""### Query Input for the evluation"""

# query=input("Enter a query: ")
query="NOT people"
terms=query.split()

terms

"""### Defining the Function for the individual operand of the query"""

def NOT_L(list1):
    not_list=[]
    for i in range(len(list1)):
        not_list.append(1-list1[i])

    return not_list

def AND_L(list1, list2):
    and_list=[]
    for i in range(len(list1)):
        and_list.append(list1[i] & list2[i])

    return and_list

def OR_L(list1, list2):
    or_list=[]
    for i in range(len(list1)):
        or_list.append(list1[i] | list2[i])

    return or_list

terms

"""### Seperating Keyword for the Operrand and storing their values in new List"""

count1=0
a=[]
final_li={}
for i in range(len(terms)):
    if (terms[i] != "AND") & (terms[i] != "OR") & (terms[i] != "NOT") & (terms[i+1]!="NOT"):
        if terms[i] not in dict.keys():
            final_li[terms[i]]=[0]*10
        else:
            final_li[terms[i]]=(dict[terms[i]])
    elif terms[i]=='NOT':
        if terms[i+1] not in dict.keys():
            final_li[terms[i+1]]=[0]*10
        else:
            temp=NOT_L(dict[terms[i+1]])
            count1+=1
        final_li[f'AN{count1}']=(temp)

final_li

"""### Processing for openrand NOT"""

while 'NOT' in terms:
    for i in range(len(terms)):
        if terms[i]=='NOT':
            terms[i+1]=f'AN{count1}'
            terms.remove(terms[i])
            break

final_li

terms

"""### Processing for the operand AND"""

count=0
while 'AND' in terms:
    for i in range(len(terms)):
        if terms[i] == "AND":
            temp=AND_L(final_li[terms[i-1]],final_li[terms[i+1]])
            del final_li[terms[i-1]], final_li[terms[i+1]]
            final_li[f"ANS{count}"]=temp
            del terms[i-1:i+2]
            terms.insert(i-1,f"ANS{count}")
            count+=1
            break

terms

final_li

"""### Processing for the operand OR"""

while 'OR' in terms:
    for i in range(len(terms)):
        if terms[i] == "OR":
            temp=OR_L(final_li[terms[i-1]],final_li[terms[i+1]])
            del final_li[terms[i-1]], final_li[terms[i+1]]
            final_li[f"ANSANS{count}"]=temp
            del terms[i-1:i+2]
            terms.insert(i-1,f"ANSANS{count}")
            count+=1
            break

terms

"""### Display of the Final Answer for the query"""

final_li

"""### Sparsity Value calcualtion"""

sparsity_value=0
for i in dict.values():
    sparsity_value+=i.count(1)

sparsity_value

sparsity_index=(sparsity_value)/(len(dict)*10)

"""### Display of the Answer for the Sparsity Index"""

sparsity_index

"""### Proceedings for the Inverted Index method calculation"""

dict_2={}
for k,v in dict.items():
    dict_2[k] = [i for i in range(len(v)) if v[i] == 1]

"""### Lists of the document ID for the specific Keyword"""

dict_2

"""### Query Input for the above method"""

# query=input("Enter a query: ")
query="work AND us OR interest"
terms=query.split()

count1=0
a=[]
final_li={}
for i in range(len(terms)):
    if (terms[i] != "AND") & (terms[i] != "OR") & (terms[i] != "NOT") & (terms[i-1]!="NOT"):
        if terms[i] not in dict_2.keys():
            final_li[terms[i]]=[0]*10
        else:
            final_li[terms[i]]=(dict_2[terms[i]])
    elif terms[i]=='NOT':
        if terms[i+1] not in dict_2.keys():
            final_li[terms[i+1]]=[0]*10
        else:
            temp=NOT_L(dict_2[terms[i+1]])
            count1+=1
        final_li[f'AN{count1}']=(temp)

final_li

"""### Defining the Function for the individual operand of the query"""

def NOT_L1(list1):
    not_list=[]
    for i in range(len(list1)):
        not_list.append(1-list1[i])

    return not_list

def AND_L(list1, list2):
    lst3 = [value for value in list1 if value in list2]
    return lst3

def OR_L(list1, list2):
    or_list=[]
    or_list=list(set(list1+list2))

    return or_list

"""### Processing the operand AND"""

count=0
while 'AND' in terms:
    for i in range(len(terms)):
        if terms[i] == "AND":
            temp=AND_L(final_li[terms[i-1]],final_li[terms[i+1]])
            del final_li[terms[i-1]], final_li[terms[i+1]]
            final_li[f"ANS{count}"]=temp
            del terms[i-1:i+2]
            terms.insert(i-1,f"ANS{count}")
            count+=1
            break

terms

final_li

"""### Processing the Operand OR"""

while 'OR' in terms:
    for i in range(len(terms)):
        if terms[i] == "OR":
            temp=OR_L(final_li[terms[i-1]],final_li[terms[i+1]])
            del final_li[terms[i-1]], final_li[terms[i+1]]
            final_li[f"ANSANS{count}"]=temp
            del terms[i-1:i+2]
            terms.insert(i-1,f"ANSANS{count}")
            count+=1
            break

terms

"""### Display of the Final Answer"""

final_li
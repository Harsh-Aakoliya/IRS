# -*- coding: utf-8 -*-
"""21BCE111_IRS_Practical_7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SJ0T5pJbbk84PIqPHwkzdkDmFHcIDfFr
"""

import numpy as np

n=3

dix_link={
    'A':['C'],
    'B':['A','C'],
    'C':['A','B','C']
}

unique_val=dix_link.keys()

unique_val

prev_rank_mat=np.full((len(dix_link),1),1/len(dix_link))

prev_rank_mat

transition_matrix=[]

for i in dix_link.values():
    tem_lst=[]
    print(i)
    tem_var=1/len(i)
    for j in unique_val:
        if j in i:
            tem_lst.append(tem_var)
        else:
            tem_lst.append(0)
    transition_matrix.append(tem_lst)

transition_matrix = np.array(transition_matrix).T

transition_matrix

rank_matrix=np.zeros(prev_rank_mat.shape)

fl=0
while(np.sum(np.abs(prev_rank_mat-rank_matrix))>=0.03):
    if fl==1: prev_rank_mat=rank_matrix
    else: fl+=1
    rank_matrix=np.dot(transition_matrix,prev_rank_mat)
    print(rank_matrix)
    print(prev_rank_mat)

rank_matrix

dix_link_1={
    'A':['A','B','C'],
    'B':['A','C'],
    'C':['B']
}

import math
prev_hub_score=np.full((len(dix_link),1),1/math.sqrt(len(dix_link)))
prev_authority_score=prev_hub_score

unique_val_1=dix_link_1.keys()

transition_matrix_1=[]

for i in dix_link_1.values():
    tem_lst=[]
    print(i)
    tem_var=1
    for j in unique_val_1:
        if j in i:
            tem_lst.append(tem_var)
        else:
            tem_lst.append(0)
    transition_matrix_1.append(tem_lst)

transition_matrix_1 = np.array(transition_matrix_1)

prev_hub_score=np.dot(transition_matrix_1,prev_hub_score)
prev_authority_score=np.dot(transition_matrix_1.T,prev_authority_score)

prev_hub_score

nor=np.linalg.norm(prev_hub_score)

nor

prev_hub_score/nor

nor2=np.linalg.norm(prev_authority_score)

prev_authority_score/nor2

hub_score=np.zeros(prev_hub_score.shape)
authority_score=np.zeros(prev_authority_score.shape)

fl=0
while(np.sum(np.abs(prev_hub_score-hub_score))>=0.03 and np.sum(np.abs(prev_authority_score-authority_score))>=0.03):
    if fl==1:
        prev_hub_score=hub_score
        prev_authority_score=authority_score
    else: fl+=1
    hub_score=np.dot(transition_matrix_1,prev_authority_score)
    authority_score=np.dot(transition_matrix_1,prev_hub_score)
    hub_score/=nor
    authority_score/=nor
    print(prev_hub_score-hub_score)
    print(prev_authority_score-authority_score)